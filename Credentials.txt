Application NAME
twitterLB

APP ID
19977010

Permissions
Read Only

API Key
IpP3rk9RyEgYtVUyCHmHLA5NT

API Secret Key
Ss40pkG2CxMLu2WlYiDKS78pQHv7wjYN8ipvQggaOC5k21InxL

Bearer Token
AAAAAAAAAAAAAAAAAAAAADLTMAEAAAAAqRNEg3SU3fBfEEbaM2OG1eIzLW0%3DDAC1JVlpggYtNHdhI6ZJz1lL4dypCX5X5Qg6xmMeGGDdway3OF


API reference contents 
GET /labs/1/tweets/stream/sample

------------------------------------------
guest_id
v1%3A161193104704809727

personalization_id
%22v1_GHIns%2FSMv8y8Ey5DqxkrZQ%3D%3D%22

Access Token
30866005-qMWa5UUZQH1b3VEXEspAMgT0zbe2PlqQTNEEK1aZN

Access Token Secret
Y5bAallEdBhhSpktpQ94lJriKCzcbZR8rLcLkaiKizBE9

################################# Sample Code for Filtered tweets ########################################

            // Filterd stream below

            //var filteredStream = userClient.Streams.CreateFilteredStream();

            //filteredStream.AddTrack("http");

            //filteredStream.MatchingTweetReceived += (sender, eventRecieved) =>
            //{
            //    //tweetProcessor.numberofTweets++;
            //    Console.WriteLine(eventRecieved.Tweet);
            //    if (eventRecieved.Tweet.Media.Count > 0)
            //    {

            //        Console.WriteLine("*** This Tweet contains media ***");
            //    }
            //};

            //await filteredStream.StartMatchingAllConditionsAsync();

##########################################################################################################
            //Create instance of classes that aggregate data 
            //averageTweets avgt = new averageTweets();
            //numberofTweets noftws = new numberofTweets();
            //percentTweetsWithEmojis ptwemo = new percentTweetsWithEmojis();
            //percentTweetsWithPhotoURL withphotourl = new percentTweetsWithPhotoURL();
            //percentTweetsWithURL withurl = new percentTweetsWithURL();

            //// Dependancy injection via Constructor
            //readTwitterSampleData rawAverageTweets = new readTwitterSampleData(avgt);
            //readTwitterSampleData rawNumberOfTweets = new readTwitterSampleData(noftws);
            //readTwitterSampleData rawTweetsWithEmojis = new readTwitterSampleData(ptwemo);
            //readTwitterSampleData rawTweetsWithPhotoURLs = new readTwitterSampleData(withphotourl);
            //readTwitterSampleData rawTweetsWithURLSs = new readTwitterSampleData(withurl);

            // Execute getResult() method via dependancy 
            //int numberOfTweets = rawNumberOfTweets.getResult();
            //int tweetsWithEmojies = rawTweetsWithEmojis.getResult();
            //int percenttweetsWithEmojis = rawTweetsWithEmojis.getResult();
            //int percenttweetsWithPhotoURLS = rawTweetsWithPhotoURLs.getResult();
            //int percenttweetsWithURLs = rawTweetsWithURLSs.getResult();

            //Write data to console
            //Console.WriteLine("Number of Tweets: " + numberOfTweets.ToString() + Environment.NewLine);
            //Console.WriteLine("Number of Tweets with Emojis: " + tweetsWithEmojies.ToString() + Environment.NewLine);

            //Console.WriteLine("Percent of Tweets with Emojis: " + percenttweetsWithEmojis.ToString() + Environment.NewLine);
            //Console.WriteLine("Percent of Tweets with Photo URLs: " + percenttweetsWithPhotoURLS.ToString() + Environment.NewLine);
            //Console.WriteLine("Percent of Tweets with URLs: " + percenttweetsWithURLs.ToString() + Environment.NewLine);

            ////Calculations 
            //double percentwithEmojis = (numberOfTweets > 0) ? ((double)tweetsWithEmojies / (double)numberOfTweets) : 0.0;
            //double percentwithphotos = (numberOfTweets > 0) ? ((double)percenttweetsWithPhotoURLS / (double)numberOfTweets) : 0.0;

            //string[] st1 = new string[] {
            //    "Number of Tweets: " + numberOfTweets.ToString(),
            //    "Number of Tweets with Emojis: " + tweetsWithEmojies.ToString(),
            //    "Percent of Tweets with Emojis: " + percentwithEmojis.ToString(),
            //    "Percent of Tweets with Photo URLs: " + percentwithphotos.ToString(),
            //    "Percent of Tweets with URLs: " + percenttweetsWithURLs.ToString(),
            //    "Tweets per Second: " + tweetsPerSecond,
            //    "Tweets per Minute: " + tweetsPerMinute,
            //    "Tweets per Hour: " + tweetsPerHour
            //    };

##########################################################################################################

            // emojiPatternMatch = @"[\u1F30-\u1F5F]";
            //emojiPatternMatch = @"[\u00a9-\u1F5F]";
            //processTweets tweetProcessor = processTweets.Instance;